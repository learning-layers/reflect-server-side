-- Generated by SQL Maestro for MySQL. Release date 22.12.2012
-- 13.11.2013 15:43:43
-- ----------------------------------
-- Alias: ponty at localhost
-- Database name: ponty
-- Host: localhost
-- Port number: 3306
-- User name: root
-- Server: 5.6.12-log
-- Session ID: 54
-- Character set: latin1
-- Collation: latin1_swedish_ci


CREATE DATABASE ponty
  CHARACTER SET latin1
  COLLATE latin1_swedish_ci;

USE ponty;

/* Tables */
CREATE TABLE answers (
  id           int AUTO_INCREMENT NOT NULL,
  `text`       text,
  question_id  int,
  created      timestamp DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
) ENGINE = InnoDB;

CREATE TABLE api_keys (
  id                        bigint AUTO_INCREMENT NOT NULL,
  api_key                   varchar(255) NOT NULL,
  blocked                   tinyint DEFAULT '1',
  valid_until               timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  current_monthly_requests  bigint DEFAULT '0',
  max_monthly_requests      int,
  created                   timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  user_id                   int,
  app_name                  varchar(250) NOT NULL,
  app_link                  varchar(250) NOT NULL,
  PRIMARY KEY (id)
) ENGINE = InnoDB;

CREATE TABLE api_settings (
  id            int AUTO_INCREMENT NOT NULL,
  max_requests  bigint NOT NULL,
  valid_for     bigint NOT NULL,
  PRIMARY KEY (id)
) ENGINE = InnoDB;

CREATE TABLE categories (
  id           int AUTO_INCREMENT NOT NULL,
  name         varchar(250) NOT NULL,
  visible      tinyint(1) DEFAULT '1',
  description  text,
  created      timestamp DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
) ENGINE = InnoDB;

CREATE TABLE questions (
  id            int AUTO_INCREMENT NOT NULL,
  public        tinyint(1) DEFAULT '0',
  name          varchar(250) NOT NULL,
  blocked       tinyint(1) DEFAULT '0',
  stack_id      int,
  category_id   int,
  rating        double DEFAULT '0',
  created       timestamp DEFAULT CURRENT_TIMESTAMP,
  rating_count  int DEFAULT '0',
  rating_sum    int DEFAULT '0',
  PRIMARY KEY (id)
) ENGINE = InnoDB;

CREATE TABLE ratings (
  id            int AUTO_INCREMENT NOT NULL,
  user_id       int NOT NULL,
  question_id   int NOT NULL,
  rating_value  int NOT NULL,
  created       timestamp DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
) ENGINE = InnoDB;

CREATE TABLE stacks (
  id           int AUTO_INCREMENT NOT NULL,
  name         varchar(250) NOT NULL,
  description  text,
  user_id      int NOT NULL,
  created      timestamp DEFAULT CURRENT_TIMESTAMP,
  public       tinyint DEFAULT '0',
  publickey    varchar(45),
  PRIMARY KEY (id)
) ENGINE = InnoDB;

CREATE TABLE trash_mail_providers (
  id       int AUTO_INCREMENT NOT NULL,
  address  varchar(100),
  PRIMARY KEY (id)
) ENGINE = InnoDB;

CREATE TABLE users (
  id        int AUTO_INCREMENT NOT NULL,
  email     varchar(250) NOT NULL,
  password  varchar(500) NOT NULL,
  is_admin  tinyint(1) DEFAULT '0',
  blocked   tinyint(1) DEFAULT '0',
  created   timestamp DEFAULT CURRENT_TIMESTAMP,
  name      varchar(250),
  PRIMARY KEY (id)
) ENGINE = InnoDB;

/* Indexes */
CREATE INDEX fk_answers2question_id_idx
  ON answers
  (question_id);

CREATE INDEX api_keys_index02
  ON api_keys
  (user_id);

CREATE INDEX fk_questions2category_id_idx
  ON questions
  (category_id);

CREATE INDEX fk_questions2stack_id_idx
  ON questions
  (stack_id);

CREATE INDEX fk_ratings2question_id_idx
  ON ratings
  (question_id);

CREATE INDEX fk_ratings2user_id_idx
  ON ratings
  (user_id);

CREATE INDEX fk_stacks2user_id_idx
  ON stacks
  (user_id);

CREATE UNIQUE INDEX trash_mail_providers_index02
  ON trash_mail_providers
  (address);

CREATE UNIQUE INDEX email
  ON users
  (email);

/* Foreign Keys */
ALTER TABLE answers
  ADD CONSTRAINT fk_answers2question_id
  FOREIGN KEY (question_id)
    REFERENCES questions(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE;

ALTER TABLE api_keys
  ADD CONSTRAINT fk_api_keys2users
  FOREIGN KEY (user_id)
    REFERENCES users(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE;

ALTER TABLE questions
  ADD CONSTRAINT fk_questions2category_id
  FOREIGN KEY (category_id)
    REFERENCES categories(id)
    ON DELETE SET NULL
    ON UPDATE SET NULL;

ALTER TABLE questions
  ADD CONSTRAINT fk_questions2stack_id
  FOREIGN KEY (stack_id)
    REFERENCES stacks(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE;

ALTER TABLE ratings
  ADD CONSTRAINT fk_ratings2question_id
  FOREIGN KEY (question_id)
    REFERENCES questions(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE;

ALTER TABLE ratings
  ADD CONSTRAINT fk_ratings2user_id
  FOREIGN KEY (user_id)
    REFERENCES users(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE;

ALTER TABLE stacks
  ADD CONSTRAINT fk_stacks2user_id
  FOREIGN KEY (user_id)
    REFERENCES users(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE;